{
  "version": 3,
  "file": "[slug].2db4e0a5.css",
  "sources": [
    "../../../../../../node_modules/@sveltejs/svelte-virtual-list/VirtualList.svelte",
    "../../../../../../src/routes/view/[slug].svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount, tick } from 'svelte';\n\n\t// props\n\texport let items;\n\texport let height = '100%';\n\texport let itemHeight;\n\n\tlet foo;\n\n\t// read-only, but visible to consumers via bind:start\n\texport let start = 0;\n\texport let end = 0;\n\n\t// local state\n\tlet height_map = [];\n\tlet rows;\n\tlet viewport;\n\tlet contents;\n\tlet viewport_height = 0;\n\tlet visible;\n\tlet mounted;\n\n\tlet top = 0;\n\tlet bottom = 0;\n\tlet average_height;\n\n\t$: visible = items.slice(start, end).map((data, i) => {\n\t\treturn { index: i + start, data };\n\t});\n\n\t// whenever `items` changes, invalidate the current heightmap\n\t$: if (mounted) refresh(items, viewport_height, itemHeight);\n\n\tasync function refresh(items, viewport_height, itemHeight) {\n\t\tconst { scrollTop } = viewport;\n\n\t\tawait tick(); // wait until the DOM is up to date\n\n\t\tlet content_height = top - scrollTop;\n\t\tlet i = start;\n\n\t\twhile (content_height < viewport_height && i < items.length) {\n\t\t\tlet row = rows[i - start];\n\n\t\t\tif (!row) {\n\t\t\t\tend = i + 1;\n\t\t\t\tawait tick(); // render the newly visible row\n\t\t\t\trow = rows[i - start];\n\t\t\t}\n\n\t\t\tconst row_height = height_map[i] = itemHeight || row.offsetHeight;\n\t\t\tcontent_height += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = (top + content_height) / end;\n\n\t\tbottom = remaining * average_height;\n\t\theight_map.length = items.length;\n\n\t}\n\n\tasync function handle_scroll() {\n\t\tconst { scrollTop } = viewport;\n\n\t\tconst old_start = start;\n\n\t\tfor (let v = 0; v < rows.length; v += 1) {\n\t\t\theight_map[start + v] = itemHeight || rows[v].offsetHeight;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet y = 0;\n\n\t\twhile (i < items.length) {\n\t\t\tconst row_height = height_map[i] || average_height;\n\t\t\tif (y + row_height > scrollTop) {\n\t\t\t\tstart = i;\n\t\t\t\ttop = y;\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ty += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\twhile (i < items.length) {\n\t\t\ty += height_map[i] || average_height;\n\t\t\ti += 1;\n\n\t\t\tif (y > scrollTop + viewport_height) break;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = y / end;\n\n\t\twhile (i < items.length) height_map[i++] = average_height;\n\t\tbottom = remaining * average_height;\n\n\t\t// prevent jumping if we scrolled up into unknown territory\n\t\tif (start < old_start) {\n\t\t\tawait tick();\n\n\t\t\tlet expected_height = 0;\n\t\t\tlet actual_height = 0;\n\n\t\t\tfor (let i = start; i < old_start; i +=1) {\n\t\t\t\tif (rows[i - start]) {\n\t\t\t\t\texpected_height += height_map[i];\n\t\t\t\t\tactual_height += itemHeight || rows[i - start].offsetHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst d = actual_height - expected_height;\n\t\t\tviewport.scrollTo(0, scrollTop + d);\n\t\t}\n\n\t\t// TODO if we overestimated the space these\n\t\t// rows would occupy we may need to add some\n\t\t// more. maybe we can just call handle_scroll again?\n\t}\n\n\t// trigger initial refresh\n\tonMount(() => {\n\t\trows = contents.getElementsByTagName('svelte-virtual-list-row');\n\t\tmounted = true;\n\t});\n</script>\n\n<style>\n\tsvelte-virtual-list-viewport {\n\t\tposition: relative;\n\t\toverflow-y: auto;\n\t\t-webkit-overflow-scrolling:touch;\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-contents, svelte-virtual-list-row {\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-row {\n\t\toverflow: hidden;\n\t}\n</style>\n\n<svelte-virtual-list-viewport\n\tbind:this={viewport}\n\tbind:offsetHeight={viewport_height}\n\ton:scroll={handle_scroll}\n\tstyle=\"height: {height};\"\n>\n\t<svelte-virtual-list-contents\n\t\tbind:this={contents}\n\t\tstyle=\"padding-top: {top}px; padding-bottom: {bottom}px;\"\n\t>\n\t\t{#each visible as row (row.index)}\n\t\t\t<svelte-virtual-list-row>\n\t\t\t\t<slot item={row.data}>Missing template</slot>\n\t\t\t</svelte-virtual-list-row>\n\t\t{/each}\n\t</svelte-virtual-list-contents>\n</svelte-virtual-list-viewport>\n",
    "<script context=\"module\">\n\timport {viewDefinition, dataComponents} from './../../stores'\n\timport VirtualList from '@sveltejs/svelte-virtual-list';\n\timport DCRenderer from './../../components/DCRenderer.svelte'\n\n\n\t// loading the url from the slug (route param)\n\texport async function preload({ params, query }) {\n\t\t// the `slug` parameter is available because\n\t\t// this file is called [slug].svelte\n\n\n\t\tconst res = await this.fetch(`${params.slug.replace(/[|-]/g, '/')}`);\n\t\tconst data = await res.json();\n\n\t\tif (res.status === 200) {\n\t\t\tviewDefinition.populate(data);\n\t\t} else {\n\t\t\tthis.error(res.status, data.message);\n\t\t}\n\t}\n\n\n\nlet start;\nlet end;\n\nlet useVirtualList = viewDefinition.UseVirtualList;\n\n</script>\n\n\n\n<svelte:head>\n\t<title>View</title>\n</svelte:head>\n\n<form autocomplete=\"off\">\n\t<header>\n\t\t<h1>{$viewDefinition.ScreenName}</h1>\n\n\t\t<p>{$viewDefinition.ScreenHelpDescription}</p>\n\t</header>\n\n\t<fieldset>\n\t\t<legend>{$viewDefinition.ScreenName}</legend>\n\t\t\t{#if $viewDefinition.UseVirtualList}\n\t\t\t\t<div class=\"view-container\">\n\t\t\t\t\t<VirtualList items={$dataComponents} let:item bind:start bind:end>\n\t\t\t\t\t\t<DCRenderer {...item}/>\n\t\t\t\t\t</VirtualList>\n\t\t\t\t</div>\n\n\t\t\t\t<p>showing items {start}-{end}</p>\n\t\t\t{:else}\n\t\t\t\t{#each $dataComponents as item}\n\n\t\t\t\t\t<DCRenderer {...item}/>\n\n\t\t\t\t{/each}\n\t\t\t{/if}\n\n\t</fieldset>\n</form>\n\n\n<style>\n\n.view-container{\n\t/*border-top: 1px solid #333;*/\n\t/*border-bottom: 1px solid #333;*/\n\tmin-height: 200px;\n\theight: calc(100vh - 15em);\n}\n\nfieldset{\n\tborder: none;\n\tpadding: 0px;\n\tmargin: 0px;\n}\n\nlegend{\n\tdisplay: none;\n}\n</style>\n\n"
  ],
  "names": [],
  "mappings": "AAyIC,4BAA4B,eAAC,CAAC,AAC7B,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,2BAA2B,KAAK,CAChC,OAAO,CAAE,KAAK,AACf,CAAC,AAED,2CAA4B,CAAE,uBAAuB,eAAC,CAAC,AACtD,OAAO,CAAE,KAAK,AACf,CAAC,AAED,uBAAuB,eAAC,CAAC,AACxB,QAAQ,CAAE,MAAM,AACjB,CAAC;AClFF,8BAAe,CAAC,AAGf,UAAU,CAAE,KAAK,CACjB,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,AAC3B,CAAC,AAED,uBAAQ,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,AACZ,CAAC,AAED,qBAAM,CAAC,AACN,OAAO,CAAE,IAAI,AACd,CAAC"
}