import { S as SvelteComponentDev, i as init, s as safe_not_equal, e as element, t as text, a as space, c as claim_element, b as children, d as claim_text, f as detach, h as add_location, g as attr, j as insert, k as append, n as noop } from './chunk.6be85367.js';

/* src/routes/view/index.svelte generated by Svelte v3.6.7 */

const file = "src/routes/view/index.svelte";

function create_fragment(ctx) {
	var h1, t0, t1, p, t2, t3, ul, li0, a0, t4, t5, t6, li1, a1, t7, t8;

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Sample Views");
			t1 = space();
			p = element("p");
			t2 = text("I have created a custom route containing the path to the json file to load which contains the view with its data components.");
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t4 = text("testForm1.json");
			t5 = text(" - APv2 Prototype Stage 1");
			t6 = space();
			li1 = element("li");
			a1 = element("a");
			t7 = text("testForm2.json");
			t8 = text(" - Virtual List Rendering");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Sample Views");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			p = claim_element(nodes, "P", {}, false);
			var p_nodes = children(p);

			t2 = claim_text(p_nodes, "I have created a custom route containing the path to the json file to load which contains the view with its data components.");
			p_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			a0 = claim_element(li0_nodes, "A", { rel: true, href: true }, false);
			var a0_nodes = children(a0);

			t4 = claim_text(a0_nodes, "testForm1.json");
			a0_nodes.forEach(detach);
			t5 = claim_text(li0_nodes, " - APv2 Prototype Stage 1");
			li0_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n\t");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			a1 = claim_element(li1_nodes, "A", { rel: true, href: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "testForm2.json");
			a1_nodes.forEach(detach);
			t8 = claim_text(li1_nodes, " - Virtual List Rendering");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(h1, file, 28, 0, 728);
			add_location(p, file, 30, 0, 751);
			attr(a0, "rel", "prefetch");
			attr(a0, "href", "view/assets-views-testForm1.json");
			add_location(a0, file, 36, 5, 898);
			add_location(li0, file, 36, 1, 894);
			attr(a1, "rel", "prefetch");
			attr(a1, "href", "view/assets-views-testForm2.json");
			add_location(a1, file, 37, 5, 1008);
			add_location(li1, file, 37, 1, 1004);
			add_location(ul, file, 35, 0, 888);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
			insert(target, t3, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, a0);
			append(a0, t4);
			append(li0, t5);
			append(ul, t6);
			append(ul, li1);
			append(li1, a1);
			append(a1, t7);
			append(li1, t8);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(p);
				detach(t3);
				detach(ul);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	// import * as moment from 'moment';
	//import * as Pikaday from 'https://cdn.jsdelivr.net/npm/pikaday/pikaday.js';
	// import { onMount } from 'svelte';

	// could not use Pikaday due to a weird moment dependency https://github.com/Pikaday/Pikaday/issues/852

	//import Datepicker from 'svelte-calendar';


	let { DisplayTypeShortCode, ShortCode, Label } = $$props;

	//
	// let start = new Date()
	// let dateFormat = "#{l}, #{F} #{j}, #{Y}"
	// let noWeekendsSelectableCallback = function (date) {
	// 	return date.getDay() != 0 && date.getDay() != 6
	// }
	// let formattedSelected = undefined
	// let dateChosen = false
	// let exampleFormatted = false
	// let exampleChosen = false

	const writable_props = ['DisplayTypeShortCode', 'ShortCode', 'Label'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('DisplayTypeShortCode' in $$props) $$invalidate('DisplayTypeShortCode', DisplayTypeShortCode = $$props.DisplayTypeShortCode);
		if ('ShortCode' in $$props) $$invalidate('ShortCode', ShortCode = $$props.ShortCode);
		if ('Label' in $$props) $$invalidate('Label', Label = $$props.Label);
	};

	return { DisplayTypeShortCode, ShortCode, Label };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["DisplayTypeShortCode", "ShortCode", "Label"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.DisplayTypeShortCode === undefined && !('DisplayTypeShortCode' in props)) {
			console.warn("<Index> was created without expected prop 'DisplayTypeShortCode'");
		}
		if (ctx.ShortCode === undefined && !('ShortCode' in props)) {
			console.warn("<Index> was created without expected prop 'ShortCode'");
		}
		if (ctx.Label === undefined && !('Label' in props)) {
			console.warn("<Index> was created without expected prop 'Label'");
		}
	}

	get DisplayTypeShortCode() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set DisplayTypeShortCode(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ShortCode() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ShortCode(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get Label() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set Label(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
