import { S as SvelteComponentDev, i as init, s as safe_not_equal, m as mount_component, z as get_spread_update, q as transition_in, r as transition_out, u as destroy_component, e as element, c as claim_element, b as children, f as detach, g as attr, h as add_location, j as insert, k as append, B as group_outros, C as check_outros, D as destroy_each, y as assign } from './chunk.6be85367.js';
import { D as DCRenderer } from './chunk.fd9f3f8f.js';

/* src/components/dataComponents/GROUP.svelte generated by Svelte v3.6.7 */

const file = "src/components/dataComponents/GROUP.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

// (14:2) {#each children as item}
function create_each_block(ctx) {
	var current;

	var dcrenderer_spread_levels = [
		{ class: "group-child" },
		ctx.item
	];

	let dcrenderer_props = {};
	for (var i = 0; i < dcrenderer_spread_levels.length; i += 1) {
		dcrenderer_props = assign(dcrenderer_props, dcrenderer_spread_levels[i]);
	}
	var dcrenderer = new DCRenderer({ props: dcrenderer_props, $$inline: true });

	return {
		c: function create() {
			dcrenderer.$$.fragment.c();
		},

		l: function claim(nodes) {
			dcrenderer.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(dcrenderer, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var dcrenderer_changes = changed.children ? get_spread_update(dcrenderer_spread_levels, [
				{ class: "group-child" },
				ctx.item
			]) : {};
			dcrenderer.$set(dcrenderer_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(dcrenderer.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(dcrenderer.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(dcrenderer, detaching);
		}
	};
}

function create_fragment(ctx) {
	var div1, div0, div1_class_value, current;

	var each_value = ctx.children;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, "data-short-code": true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div0, "class", "group-children svelte-3w0hu8");
			add_location(div0, file, 12, 1, 263);
			attr(div1, "class", div1_class_value = "group-container " + ctx.CSSClass + " svelte-3w0hu8");
			div1.dataset.shortCode = ctx.ShortCode;
			add_location(div1, file, 11, 0, 191);
		},

		m: function mount(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.children) {
				each_value = ctx.children;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) out(i);
				check_outros();
			}

			if ((!current || changed.CSSClass) && div1_class_value !== (div1_class_value = "group-container " + ctx.CSSClass + " svelte-3w0hu8")) {
				attr(div1, "class", div1_class_value);
			}

			if (!current || changed.ShortCode) {
				div1.dataset.shortCode = ctx.ShortCode;
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) transition_in(each_blocks[i]);

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) transition_out(each_blocks[i]);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div1);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { DisplayTypeShortCode, ShortCode, Label, children, CSSClass } = $$props;

	const writable_props = ['DisplayTypeShortCode', 'ShortCode', 'Label', 'children', 'CSSClass'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<GROUP> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('DisplayTypeShortCode' in $$props) $$invalidate('DisplayTypeShortCode', DisplayTypeShortCode = $$props.DisplayTypeShortCode);
		if ('ShortCode' in $$props) $$invalidate('ShortCode', ShortCode = $$props.ShortCode);
		if ('Label' in $$props) $$invalidate('Label', Label = $$props.Label);
		if ('children' in $$props) $$invalidate('children', children = $$props.children);
		if ('CSSClass' in $$props) $$invalidate('CSSClass', CSSClass = $$props.CSSClass);
	};

	return {
		DisplayTypeShortCode,
		ShortCode,
		Label,
		children,
		CSSClass
	};
}

class GROUP extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["DisplayTypeShortCode", "ShortCode", "Label", "children", "CSSClass"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.DisplayTypeShortCode === undefined && !('DisplayTypeShortCode' in props)) {
			console.warn("<GROUP> was created without expected prop 'DisplayTypeShortCode'");
		}
		if (ctx.ShortCode === undefined && !('ShortCode' in props)) {
			console.warn("<GROUP> was created without expected prop 'ShortCode'");
		}
		if (ctx.Label === undefined && !('Label' in props)) {
			console.warn("<GROUP> was created without expected prop 'Label'");
		}
		if (ctx.children === undefined && !('children' in props)) {
			console.warn("<GROUP> was created without expected prop 'children'");
		}
		if (ctx.CSSClass === undefined && !('CSSClass' in props)) {
			console.warn("<GROUP> was created without expected prop 'CSSClass'");
		}
	}

	get DisplayTypeShortCode() {
		throw new Error("<GROUP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set DisplayTypeShortCode(value) {
		throw new Error("<GROUP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ShortCode() {
		throw new Error("<GROUP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ShortCode(value) {
		throw new Error("<GROUP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get Label() {
		throw new Error("<GROUP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set Label(value) {
		throw new Error("<GROUP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get children() {
		throw new Error("<GROUP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set children(value) {
		throw new Error("<GROUP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get CSSClass() {
		throw new Error("<GROUP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set CSSClass(value) {
		throw new Error("<GROUP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default GROUP;
